// server.ts
import express, { Request, Response } from 'express';
import multer from 'multer';
import XLSX from 'xlsx';
import cors from 'cors';
import path from 'path';
import admin from 'firebase-admin';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase Admin
// –í–ê–ñ–õ–ò–í–û: –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–≤—ñ–π serviceAccountKey.json –∑ Firebase Console
const serviceAccount = require('../serviceAccountKey.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

const app = express();
const PORT = process.env.PORT || 3007;

// Middleware
app.use(cors());
app.use(express.json());

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è multer
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    if (ext === '.xlsx' || ext === '.xls') {
      cb(null, true);
    } else {
      cb(new Error('–¢—ñ–ª—å–∫–∏ Excel —Ñ–∞–π–ª–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ'));
    }
  },
  limits: { fileSize: 10 * 1024 * 1024 } // 10MB
});

// –¢–∏–ø–∏
interface ExcelData {
  headers: string[];
  rows: any[][];
  fileName: string;
  rowCount: number;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firestore
async function saveToFirestore(data: ExcelData, documentId?: string) {
  try {
    const collectionRef = db.collection('excel_data');
    console.info(`saveToFirestore: ${data.fileName}, documentId: ${documentId}`);
    const docData = {
      fileName: data.fileName,
      headers: data.headers,
      rows: data.rows,
      rowCount: data.rowCount,
      uploadedAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };
    console.info(`saveToFirestore:2  headers: ${docData.headers.length}, rows: ${docData.rows.length}`);

    let docRef;
    if (documentId) {
      console.info(`saveToFirestore:3 updating document ${documentId} start`);
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      docRef = collectionRef.doc(documentId);
      await docRef.update({
        ...docData,
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      });
      console.info(`saveToFirestore:3 updating document ${documentId} end`);

    } else {
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      console.info(`saveToFirestore:4 adding new document start ${JSON.stringify(docData)}`);

      docRef = await collectionRef.add(docData);
      console.info(`saveToFirestore:4 adding new document end`);
    }

    return {
      id: docRef.id,
      success: true,
      message: '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firestore'
    };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firestore:', error);
    throw error;
  }
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Excel
app.post('/api/upload', upload.single('file'), async (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ' });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ Excel
    const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const jsonData: any[][] = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

    if (jsonData.length === 0) {
      return res.status(400).json({ error: '–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π' });
    }

    const headers = jsonData[0];
    const rows = jsonData.slice(1);

    const excelData: ExcelData = {
      headers,
      rows,
      fileName: req.file.originalname,
      rowCount: rows.length
    };

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firestore
    const firestoreResult = await saveToFirestore(excelData);// "test_excel_db"

    res.json({
      ...excelData,
      firestore: firestoreResult
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏:', error);
    res.status(500).json({
      error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
app.get('/api/files', async (req: Request, res: Response) => {
  try {
    const snapshot = await db.collection('excel_data')
      .orderBy('uploadedAt', 'desc')
      .get();

    const files = snapshot.docs.map(doc => ({
      id: doc.id,
      fileName: doc.data().fileName,
      rowCount: doc.data().rowCount,
      uploadedAt: doc.data().uploadedAt,
      updatedAt: doc.data().updatedAt
    }));

    res.json({ files, count: files.length });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É
app.get('/api/files/:id', async (req: Request, res: Response) => {
  try {
    const docRef = db.collection('excel_data').doc(req.params.id);
    const doc = await docRef.get();

    if (!doc.exists) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({
      id: doc.id,
      ...doc.data()
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É
app.delete('/api/files/:id', async (req: Request, res: Response) => {
  try {
    await db.collection('excel_data').doc(req.params.id).delete();
    res.json({ success: true, message: '–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤ Firestore
app.post('/api/search', async (req: Request, res: Response) => {
  try {
    const { searchTerm } = req.body;

    if (!searchTerm) {
      return res.status(400).json({ error: '–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' });
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é)
    const snapshot = await db.collection('excel_data').get();
    const results: any[] = [];

    snapshot.docs.forEach(doc => {
      const data = doc.data();
      const matchingRows = data.rows.filter((row: any[]) =>
        row.some((cell: any) =>
          cell?.toString().toLowerCase().includes(searchTerm.toLowerCase())
        )
      );

      if (matchingRows.length > 0) {
        results.push({
          id: doc.id,
          fileName: data.fileName,
          matchingRows,
          matchCount: matchingRows.length
        });
      }
    });

    res.json({ results, totalMatches: results.length });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É' });
  }
});

// Health check
app.get('/api/health', (req: Request, res: Response) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    firebase: 'Connected'
  });
});

// // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// app.listen(PORT, () => {
//   console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
//   console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ http://localhost:${PORT}/api`);
//   console.log(`üî• Firebase Firestore –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
// });

// –ó–∞–º—ñ–Ω—ñ—Ç—å app.listen –Ω–∞:
const startServer = async (port: number) => {
  try {
    app.listen(port, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
      console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ http://localhost:${port}/api`);
      console.log(`üî• Firebase Firestore –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
    });
  } catch (error) {
    if ((error as any).code === 'EADDRINUSE') {
      console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${port} –∑–∞–π–Ω—è—Ç–∏–π, –ø—Ä–æ–±—É—é ${port + 1}...`);
      startServer(port + 1);
    } else {
      throw error;
    }
  }
};

startServer(Number(PORT));


export default app;